set.seed(3523)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mf <- train(CompressiveStrength ~ ., method = "lasso", data=training)
library(caret)
mf <- train(CompressiveStrength ~ ., method = "lasso", data=training)
training = concrete[ inTrain,]
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mf <- train(CompressiveStrength ~ ., method = "lasso", data=training)
set.seed(233)
mf <- train(CompressiveStrength ~ ., method = "lasso", data=training)
mf$finalmodel
mf$finalModel
mffin < mf$finalModel
mffin <- mf$finalModel
mffin$attr
mffin$penalty
mffin$df
mffin$Cp
mffin$sigma2
mffin$beta.pure
mf$finalModel$bet.pure
mf$finalModel$beta.pure
set.seed(4582)
inTrain<-createDataPartition(y=pmltraining$classe,p=.5,list=FALSE)
colclasses <- c("NULL", "factor", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "factor")
pmltraining = read.csv("C:/_dev/R/machlearn/pml-training.csv", header=TRUE, colClasses=colclasses)
library(caret)
set.seed(4582)
inTrain<-createDataPartition(y=pmltraining$classe,p=.5,list=FALSE)
training<-pmltraining[inTrain,]
testing<-pmltraining[-inTrain,]
M <- abs(cor(training[,6:57]))
M <- abs(cor(training[,2:53]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv[which(nsv$nzv),]
training.caretRpart <- train(classe ~ .,method="rpart",data=training)
print(training.caretRpart$finalModel)
library(rattle)
fancyRpartPlot(training.caretRpart$finalModel)
library(rpart)
training.rpart <- rpart(classe ~ ., data=training)
plotcp(training.rpart)
printcp(training.rpart)
print(training.rpart)
library(tree)
training.tree <- tree(classe ~ ., data=training)
print(training.tree)
library(randomForest)
training.rf <- randomForest(training, y=training$classe)
prComp <- prcomp(training[,2:53])
?randomForest
training.rf
?rpart
summary(training$classe)
summary(pmltraining$classe)
summary(pmltraining$user_name)
summary(training$user_name)
summary(roll_belt)
summary(pmltrainingroll_belt)
summary(pmltraining$roll_belt)
quartile(pmltraining$roll_belt)
qt(pmltraining$roll_belt)
quantile(pmltraining$roll_belt)
?randomForest
training.rf <- randomForest(prComp, y=training$classe)
training.pc <- predict(prComp, training)
training.rf <- randomForest(training.pc, y=training$classe)
training.rf
training.rf$confusion
training.rf <- randomForest(training, y=training$classe)
training.rf$confusion
testing.pc <- predict(prComp, testing)
testing.pc$confusion
confusionMatrix(testing.pc)
testing.pc <- predict(prComp, testing[,-54])
confusionMatrix(testing.pc)
testing.pc <- predict(prComp, testing[,2:53])
confusionMatrix(testing.pc)
confusionMatrix(testing$classe, predict(training.rf, testing.pc)
)
testing.pc <- predict(prComp, testing)
confusionMatrix(testing$classe, predict(training.rf, testing.pc))
prComp <- prcomp(training[,2:53])
training.pc <- predict(prComp, training)
training.rf <- randomForest(training.pc, y=training$classe)
testing.pc <- predict(prComp, testing)
confusionMatrix(testing$classe, predict(training.rf, testing.pc))
confusionMatrix(testing$classe, predict(training.rf, testing))
training.rf <- randomForest(training, y=training$classe)
confusionMatrix(testing$classe, predict(training.rf, testing))
training.rf <- randomForest(training[,2:53], y=training$classe)
training.rf$confusion
confusionMatrix(testing$classe, predict(training.rf, testing))
round(importance(training.rf), 2)
training.rf <- randomForest(training[,-54], y=training$classe)
training.rf$confusion
confusionMatrix(testing$classe, predict(training.rf, testing))
set.seed(647)
training.rfcv <- rfcv(training[,2:53], training$classe, cv.fold=3)
training.rfcv
with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))
with(training.rfcv, plot(n.var, error.cv, log="x", type="o", lwd=2))
varImpPlot(training.rf)
varUsed(x)
varUsed(training.rf)
plot(class ~ roll_belt, data=training)
plot(classe ~ roll_belt, data=training)
plot(roll_belt, data=training)
?split
train.sets <- split(training.rf, user_name)
train.sets <- split(training.rf, training.rf$user_name)
plot(training$roll_belt, col=training$classe)
?trainControl
confusionMatrix(testing$classe, predict(training.rf, testing))
print(training.rf)
training.pcrf <- randomForest(training.pc, y=training$classe)
training.pcrf
colclasses <- c("NULL", "factor", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "factor")
pmltraining = read.csv("C:/_dev/R/machlearn/pml-training.csv", header=TRUE, colClasses=colclasses)
library(caret)
set.seed(4582)
inTrain<-createDataPartition(y=pmltraining$classe,p=.7,list=FALSE)
training<-pmltraining[inTrain,]
testing<-pmltraining[-inTrain,]
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv[which(nsv$nzv),]
M <- abs(cor(training[,2:53]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
prComp <- prcomp(training[,2:53])
training.pc <- predict(prComp, training)
training.pcrf <- randomForest(training.pc, y=training$classe)
testing.pc <- predict(prComp, testing)
training.pcrf
training.rf <- randomForest(training[,2:53], y=training$classe)
training.rf
importance(training.rf)
sort(importance(training.rf))
class(importance(training.rf))
imp <- importance(training.rf)
imp[order(imp[,2]),]
imp[order(imp[,1]),]
imp <- round(importance(training.rf), 2)
imp[order(imp[,1]),]
imp <- round(importance(training.rf), 2)
imp[order(imp[,1]),]
set.seed(4582)
training.rfcv <- rfcv(training[,2:53], training$classe, cv.fold=3)
with(training.rfcv, plot(n.var, error.cv, log="x", type="o", lwd=2))
varImpPlot(training.rf)
confusionMatrix(testing$classe, predict(training.rf, testing))
pmltraining = read.csv("C:/_dev/R/machlearn/pml-testing.csv", header=TRUE, colClasses=colclasses)
pmltesting = read.csv("C:/_dev/R/machlearn/pml-testing.csv", header=TRUE, colClasses=colclasses)
test.pr <- predict(training.rf, pmltesting)
test.pr
test.pr[,1]
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(test.pr)
chwd()
setwd()
getwd()
library(devtools)
find_rtools()
find_rtools()
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
install_github("ramnathv/rCharts@dev")
install.packages("googleVis")
install_github("rstudio/shinyapps")
shiny::runApp('C:/_dev/R/dataprod')
install_github("slidify","ramnathv")
library(devtools)
find_rtools()
install_github("slidify","ramnathv")
install_github("ramnathv/slidifyLibraries")
library(slidify)
x <- seq(-10, 10, length = 1000)
plot(x, sin(x), xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, cos(x), lty = 3)
title("Trigonometric functions", "sin(x) and cos(x)")
plot(x, sin(x)*2, xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, cos(x), lty = 3)
title("Trigonometric functions", "sin(x) and cos(x)")
plot(x, sin(x*2), xlab = "x-values", ylab = "f(x)", type = "l")
plot(x, sin(x*3), xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, cos(x*3), lty = 3)
plot(x, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, sin(x*28), lty = 3)
x <- seq(-100, 100, length = 1000)
plot(x, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, sin(x*28), lty = 3)
lines(x, sin(x*23), lty = 3)
x <- seq(-1000, 1000, length = 1000)
plot(x, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, sin(x*28), lty = 3)
lines(x, sin(x*23), lty = 3)
x <- seq(-10, 10, length = 1000)
plot(x, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
plot(x*2, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
plot(x, sin(x*33)/5, xlab = "x-values", ylab = "f(x)", type = "l")
x <- seq(-10, 10, length = 1000)
plot(x, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
lines(x, sin(x*28), lty = 3)
lines(x, sin(x*23), lty = 3)
x <- seq(-15, 15, length = 1000)
plot(x, sin(x*33), xlab = "x-values", ylab = "f(x)", type = "l")
plot(x, sin(x/33), xlab = "x-values", ylab = "f(x)", type = "l")
x <- seq(-15, 15, length = 100)
y <- rnorm(100)
plot(x, y, xlab = "x-values", ylab = "f(x)", type = "l")
abline(lm(y~x))
abline(lm(y~x), col="red")
strsplit("4,5,6,7",",")
strsplit("44,54,64,74",",")
fit <- lm(y~x)
abline(fit, col="red")
coefficients(fit) # model coefficients
confint(fit, level=0.95) # CIs for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
vcov(fit) # covariance matrix for model parameters
influence(fit) # regression diagnostics
coefficients(fit) # model coefficients
coeficients(fit)$(Intercept)
coefficients(fit)$(Intercept)
coefficients(fit)$(x)
coefficients(fit)$x
class(coefficients(fit))
coefficients(fit)[1]
anova(fit)
q <- anova(fit)
plot(fit)
library(shiny)
runApp()
setwd("C:/_dev/R/dataprod")
setwd("C:/_dev/R/dataprod")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?strsplit
strsplit("1,22,33,44",",")
runApp()
unlist(strsplit("1,22,33,44",","))
unlist(as.numeric(strsplit("1,22,33,44",",")))
as.numeric(unlist(strsplit("1,22,33,44",",")))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='jpittard',
token='1F75777394CE4CA5F3703D06AEDBAB39',
secret='rsZndByZ49OBw3KixDYctwGOaiwzOKtcwsy12OHL')
shinyapps::deployApp('./shiny')
library(slidify)
setwd("slidify")
slidify("index.Rmd")
setwd()
slidify("index.md")
author('pitch')
author      : J.Pittard
author      : JPittard
slidify("index.Rmd")
library(knitr)
browseUrl("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
?plot
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish_github("pittard/slidify")
publish_github("pittard/slidify")
